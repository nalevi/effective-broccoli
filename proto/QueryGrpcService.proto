syntax = "proto3";

import "google/protobuf/timestamp.proto";

package grpcservice;

// The whole gRPC Server is the exposed service itself.
// It provides the CRUD procedures in a Database agnostic way (SQL, No-SQL).
service GrpcService {
  // Create an entity in the database.
  // This represents an SQL INSERT, or key value PUT, etc.
  rpc Create(CreateRequest) returns (CreateResponse) {}

  rpc Read(ReadRequest) returns (ReadResponse) {}
  rpc Update(UpdateRequest) returns (UpdateResponse) {}
  rpc Delete(DeleteRequest) returns (DeleteResponse) {}
}

message Id {
  optional string id = 1;
}


message FieldValue {
  oneof value {
    int64 big_int_value = 1;
    int32 int_value = 2;
    sint32 signed_int_value = 3;
    sint64  signed_big_int_value = 4;
    double double_value = 5;
    float float_value = 6;
    string str_value = 7;
    bytes byte_value = 8;
    bool bool_value = 9;
    google.protobuf.Timestamp timestamp_value = 10;
  }
}

enum Operator {
  OPERATOR_UNKNOWN = 0;
  OPERATOR_EQ = 1;
  OPERATOR_NOT_EQ = 2;
  OPERATOR_GREATER = 3;
  OPERATOR_GREATER_EQ = 4;
  OPERATOR_LESS = 5;
  OPERATOR_LESS_EQ = 6;
  OPERATOR_LIKE = 7;
  OPERATOR_NOT_LIKE = 8;
}

message Conditions {
  string name = 1;
  FieldValue value = 2;
  Operator operator = 3;

}

// Type of databases:
//  - Sql (Postgres, Oracle, MySql, etc.)
//  - Key Value (like Redis, etc.)
enum DbType {
  DBTYPE_UNKNOWN = 0;
  DBTYPE_SQL = 1;
  DBTYPE_KV = 2;
}

message CreateRequest {
  // Id generated by the client.
  Id id = 1;

  // Field name and value pairs to be saved in the database entity.
  map<string, FieldValue> name_value = 2;

  // The name of the database entity (it is a key name in case of KV dbs)
  string table_name = 4;

  DbType db_type = 5;
}

message CreateResponse {
  Id id = 1;
}

// Represents Read operation on databases.
message ReadRequest {
  // Request Id
  Id id = 1;

  // Field names to be returned. This should be present only, when all_fields is false or not present.
  optional string field_name = 2;

  // The name of the database entity to read from.
  string table_name = 3;

  // Type of database (SQL, KeyValue)
  DbType db_type = 4;

  // Controls whether you want to read all fields of the db entity.
  // Should be false or not present, when field_name is present.
  optional bool all_fields = 5;

  // Optionally, you can give conditions on the fields being read out.
  optional Conditions conditions = 6;
}

message ReadResponse {
  // The ID sent by the client in the request.
  Id id = 1;

  // Returning the result in pairs: Field name - Field value
  map<string, FieldValue> name_values = 2;
}

message UpdateRequest {
  // Request Id
  Id id = 1;

  // Field name and value pairs to be updated in the database entity.
  map<string, FieldValue> name_value = 2;

  // The name of the database entity to update.
  string table_name = 3;

  // Type of database (SQL, KeyValue)
  DbType db_type = 4;

  // Optionally, you can give conditions on the fields being updated.
  optional Conditions conditions = 6;
}
message UpdateResponse {
  // The ID sent by the client in the request.
  Id id = 1;
}

message DeleteRequest {
  // Request Id
  Id id = 1;

  // Field name to be deleted from the database entity.
  string field_name = 2;

  // The name of the database entity.
  string table_name = 3;

  // Type of database (SQL, KeyValue)
  DbType db_type = 4;

  // Optionally, you can give conditions on the fields being deleted.
  optional Conditions conditions = 6;
}
message DeleteResponse {
  // The ID sent by the client in the request.
  Id id = 1;
}